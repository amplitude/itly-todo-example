/**
 * This file is auto-generated by Iteratively.
 * To update run 'itly pull web'
 *
 * Works with versions ^2.0.8 of @itly/sdk and @itly/plugin's
 * https://www.npmjs.com/search?q=%40itly
 */

/* tslint:disable */
/* eslint-disable */
import {
  ItlyBrowser,
  Options as OptionsBase,
  Event as EventBase,
  Plugin,
  Environment as EnvironmentBase,
  Properties as PropertiesBase,
  ValidationResponse as ValidationResponseBase,
  CallOptions as CallOptionsBase,
  PluginCallOptions as PluginCallOptionsBase,
} from '@itly/sdk';
import SchemaValidatorPlugin from '@itly/plugin-schema-validator';
import IterativelyPlugin, { IterativelyOptionsPartial as IterativelyOptions } from '@itly/plugin-iteratively';
import AmplitudePlugin, {
  AmplitudeOptions,
  AmplitudeAliasOptions as AmplitudeAliasOptionsBase,
  AmplitudeIdentifyOptions as AmplitudeIdentifyOptionsBase,
  AmplitudeGroupOptions as AmplitudeGroupOptionsBase,
  AmplitudePageOptions as AmplitudePageOptionsBase,
  AmplitudeTrackOptions as AmplitudeTrackOptionsBase,
} from '@itly/plugin-amplitude';

export type Options = OptionsBase;
export type Environment = EnvironmentBase;
export type Event = EventBase;
export type Properties = PropertiesBase;
export type ValidationResponse = ValidationResponseBase;
export type CallOptions = CallOptionsBase;
export type PluginCallOptions = PluginCallOptionsBase;
export { Plugin, Validation, Loggers } from '@itly/sdk';
export type AmplitudeAliasOptions = AmplitudeAliasOptionsBase;
export type AmplitudeIdentifyOptions = AmplitudeIdentifyOptionsBase;
export type AmplitudeGroupOptions = AmplitudeGroupOptionsBase;
export type AmplitudePageOptions = AmplitudePageOptionsBase;
export type AmplitudeTrackOptions = AmplitudeTrackOptionsBase;

export interface AliasOptions extends CallOptions {
  amplitude?: AmplitudeAliasOptions;
}

export interface IdentifyOptions extends CallOptions {
  amplitude?: AmplitudeIdentifyOptions;
}

export interface GroupOptions extends CallOptions {
  amplitude?: AmplitudeGroupOptions;
}

export interface PageOptions extends CallOptions {
  amplitude?: AmplitudePageOptions;
}

export interface TrackOptions extends CallOptions {
  amplitude?: AmplitudeTrackOptions;
}

export interface IdentifyProperties {
  /**
   * The first name of the user.
   */
  first_name: string;
}

export class TodoDeleted implements Event {
  name = 'Todo Deleted';
  id = '047da53e-da2f-4aed-8e4c-81ce3a61a42a';
  version = '3.0.1';
}

export class TodosCleared implements Event {
  name = 'Todos Cleared';
  id = '2a656e32-0e2b-4a0c-8132-9750768101be';
  version = '3.0.1';
}

export class TodoCreated implements Event {
  name = 'Todo Created';
  id = '5a12a386-91a9-47e4-91fc-52d93bbfcd78';
  version = '5.0.1';
}

export class TodoToggled implements Event {
  name = 'Todo Toggled';
  id = '9df75462-3736-4a9e-9e00-46b504555be2';
  version = '1.0.0';
}

export class TodosToggled implements Event {
  name = 'Todos Toggled';
  id = '9e894aac-5921-40c1-befd-07be5d343962';
  version = '1.0.0';
}

// prettier-ignore
interface DestinationOptions {
  iteratively?: IterativelyOptions;
  amplitude?: AmplitudeOptions;
  all?: {
    disabled?: boolean;
  };
}

export interface LoadOptions extends OptionsBase {
  /**
   * Analytics provider-specific configuration.
   */
  destinations?: DestinationOptions;
}

// prettier-ignore
class Itly {
  private itly: ItlyBrowser;

  constructor() {
    this.itly = new ItlyBrowser();
  }

  /**
   * Initialize the Itly SDK. Call once when your application starts.
   * @param loadOptions Configuration options to initialize the Itly SDK with.
   */
  load(loadOptions: LoadOptions = {}) {
    const {
      destinations = {} as DestinationOptions,
      plugins = [] as Plugin[],
      ...options
    } = loadOptions;

    const destinationPlugins = destinations.all && destinations.all.disabled
      ? []
      : [
        new IterativelyPlugin(options.environment === 'production'
          ? 'VwZgWTU0u2D9uimAkwIxya0dOXAFW1dE'
          : 'taQpDYJgWpeIVOclkolEm0EHBs4zo1LJ',
          {
            url: 'https://data.us-east-2.iterative.ly/t?b=main&v=403.0.0',
            environment: options.environment || 'development',
            ...destinations.iteratively,
          },
        ),
        new AmplitudePlugin(options.environment === 'production'
          ? '08ed2d4a871a818f51a11d5cf406b322'
          : '08ed2d4a871a818f51a11d5cf406b322',
          destinations.amplitude,
        ),
      ];

    this.itly.load({
      ...options,
      plugins: [
        new SchemaValidatorPlugin({
          'identify': {"type":"object","properties":{"first_name":{"type":"string"}},"additionalProperties":false,"required":["first_name"]},
          'Todo Created': {"type":"object","properties":{},"additionalProperties":false,"required":[]},
          'Todo Deleted': {"type":"object","properties":{},"additionalProperties":false,"required":[]},
          'Todo Toggled': {"type":"object","properties":{},"additionalProperties":false,"required":[]},
          'Todos Cleared': {"type":"object","properties":{},"additionalProperties":false,"required":[]},
          'Todos Toggled': {"type":"object","properties":{},"additionalProperties":false,"required":[]},
        }),
        ...destinationPlugins,
        ...plugins,
      ],
    });
  }

  /**
   * Alias a user ID to another user ID.
   * @param userId The user's new ID.
   * @param previousId The user's previous ID.
   * @param options Options for this alias call.
   */
  alias(userId: string, previousId?: string, options?: AliasOptions) {
    this.itly.alias(userId, previousId, options);
  }

  /**
   * Identify a user and set or update that user's properties.
   * @param userId The user's ID.
   * @param properties The user's properties.
   * @param options Options for this identify call.
   */
  identify(
    userId: string | undefined,
    properties: IdentifyProperties,
    options?: IdentifyOptions,
  ) {
    this.itly.identify(userId, properties, options);
  }

  /**
   * Associate the current user with a group.
   * @param groupId The group's ID.
   * @param options Options for this group call.
   */
  group(
    groupId: string,
    options?: GroupOptions,
  ) {
    this.itly.group(groupId, undefined, options);
  }

  /**
   * Track a page view.
   * @param category The page's category.
   * @param name The page's name.
   * @param options Options for this page call.
   */
  page(
    category: string,
    name: string,
    options?: PageOptions,
  ) {
    this.itly.page(category, name, undefined, options);
  }

  /**
   * Called when a todo is deleted.
   * 
   * Owner: Ondrej Hrebicek
   * @param options Options for this track call.
   */
  todoDeleted(
    options?: TrackOptions,
  ) {
    this.itly.track(new TodoDeleted(), options);
  }

  /**
   * Called when todos are cleared.
   * 
   * Owner: Patrick Thompson
   * @param options Options for this track call.
   */
  todosCleared(
    options?: TrackOptions,
  ) {
    this.itly.track(new TodosCleared(), options);
  }

  /**
   * Called when a todo is created.
   * 
   * Owner: Patrick Thompson
   * @param options Options for this track call.
   */
  todoCreated(
    options?: TrackOptions,
  ) {
    this.itly.track(new TodoCreated(), options);
  }

  /**
   * Called when a todo is toggled.
   * 
   * Owner: Patrick Thompson
   * @param options Options for this track call.
   */
  todoToggled(
    options?: TrackOptions,
  ) {
    this.itly.track(new TodoToggled(), options);
  }

  /**
   * Called when todos are toggled.
   * 
   * Owner: Patrick Thompson
   * @param options Options for this track call.
   */
  todosToggled(
    options?: TrackOptions,
  ) {
    this.itly.track(new TodosToggled(), options);
  }

  /**
   * Track any event.
   * @param event The event to track.
   * @param options Options for this track call.
   */
  track(event: Event, options?: TrackOptions) {
    this.itly.track(event, options);
  }

  /**
   * Reset (e.g. on logout) all analytics state for the current user and group.
   */
  reset() {
    this.itly.reset();
  }

  async flush() {
    await this.itly.flush();
  }
}

export default new Itly();
